### Unstaged Changes ###
diff --git a/frontend/src/App.js b/frontend/src/App.js
index ed318aa..e21366d 100644
--- a/frontend/src/App.js
+++ b/frontend/src/App.js
@@ -34,6 +34,7 @@ export default function App() {
     const [triggerGetTrades] = useLazyGetTradesQuery();
     const isAuthenticated = useSelector(state => state.auth.isAuthenticated);
     const userRoles = useSelector(state => state.auth.roles);
+    const tenantId = useSelector(state => state.auth.tenantId);
     useEffect(() => {
         if(isAuthenticated){
         triggerGetOrders({
@@ -66,7 +67,7 @@ export default function App() {
                     const currentTrades = store.getState().trade.trades; // Fetch the latest trades state
                     dispatch(setTrades([newTrade, ...currentTrades]));
                 }
-            });
+            }, tenantId);
     
         }
         
diff --git a/frontend/src/redux/AuthSlice.js b/frontend/src/redux/AuthSlice.js
index 808d3e2..21c3bc7 100644
--- a/frontend/src/redux/AuthSlice.js
+++ b/frontend/src/redux/AuthSlice.js
@@ -4,6 +4,7 @@ const initialState = {
     user: null, // Store user data here
     token: null, // JWT token
     roles: [], // User roles
+    tenantId: null,
     isAuthenticated: false,
 };
 
@@ -15,12 +16,14 @@ export const authSlice = createSlice({
             state.user = action.payload.user;
             state.token = action.payload.token;
             state.roles = action.payload.roles;
+            state.tenantId = action.payload.tenantId;
             state.isAuthenticated = true;
         },
         logout: (state) => {
             state.user = null;
             state.token = null;
             state.roles = [];
+            state.tenantId = null;
             state.isAuthenticated = false;
         },
     },
diff --git a/frontend/src/services/WebSocketService.js b/frontend/src/services/WebSocketService.js
index 0802658..e996a72 100644
--- a/frontend/src/services/WebSocketService.js
+++ b/frontend/src/services/WebSocketService.js
@@ -6,7 +6,7 @@ const SOCKET_URL = process.env.REACT_APP_WEBSOCKET_URL || "http://localhost:8080
 let stompClient = null;
 let subscriptions = [];
 
-export const connect = (onMessage) => {
+export const connect = (onMessage, tenantId) => {
     if (stompClient && stompClient.connected) {
         console.log("WebSocket is already connected.");
         return;
@@ -20,10 +20,10 @@ export const connect = (onMessage) => {
 
         // Subscribe to multiple topics
         subscriptions = [
-            stompClient.subscribe("/topic/orders", (message) => {
+            stompClient.subscribe(`/topic/orders/${tenantId}`, (message) => {
                 onMessage(JSON.parse(message.body), "orders");
             }),
-            stompClient.subscribe("/topic/trades", (message) => {
+            stompClient.subscribe(`/topic/trades/${tenantId}`, (message) => {
                 onMessage(JSON.parse(message.body), "trades");
             }),
         ];

### Staged Changes ###
