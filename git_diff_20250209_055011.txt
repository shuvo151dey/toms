### Unstaged Changes ###
diff --git a/frontend/src/services/WebSocketService.js b/frontend/src/services/WebSocketService.js
index e996a72..0cbef9c 100644
--- a/frontend/src/services/WebSocketService.js
+++ b/frontend/src/services/WebSocketService.js
@@ -5,6 +5,7 @@ const SOCKET_URL = process.env.REACT_APP_WEBSOCKET_URL || "http://localhost:8080
 
 let stompClient = null;
 let subscriptions = [];
+let retryCounts = 0;
 
 export const connect = (onMessage, tenantId) => {
     if (stompClient && stompClient.connected) {
@@ -14,20 +15,29 @@ export const connect = (onMessage, tenantId) => {
 
     const socket = new SockJS(SOCKET_URL);
     stompClient = Stomp.over(socket);
-
-    stompClient.connect({}, () => {
-        console.log("Connected to WebSocket");
-
-        // Subscribe to multiple topics
-        subscriptions = [
-            stompClient.subscribe(`/topic/orders/${tenantId}`, (message) => {
-                onMessage(JSON.parse(message.body), "orders");
-            }),
-            stompClient.subscribe(`/topic/trades/${tenantId}`, (message) => {
-                onMessage(JSON.parse(message.body), "trades");
-            }),
-        ];
-    });
+    
+    const connectWithRetry = () => {
+        stompClient.connect({}, () => {
+            console.log("Connected to WebSocket");
+    
+            
+            subscriptions = [
+                stompClient.subscribe(`/topic/orders/${tenantId}`, (message) => {
+                    onMessage(JSON.parse(message.body), "orders");
+                }),
+                stompClient.subscribe(`/topic/trades/${tenantId}`, (message) => {
+                    onMessage(JSON.parse(message.body), "trades");
+                }),
+            ];
+            retryCounts = 0;
+        }, (error) => {
+            console.log("Websocket error:", error);
+            retryCounts++;
+            const delay = Math.min(retryCounts*5000, 30000);
+            setTimeout(connectWithRetry,delay);
+        });
+    }
+    connectWithRetry();
 };
 
 export const disconnect = () => {

### Staged Changes ###
