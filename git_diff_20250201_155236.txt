### Unstaged Changes ###

### Staged Changes ###
diff --git a/backend/src/main/java/tech/smdey/toms/controller/MatchingController.java b/backend/src/main/java/tech/smdey/toms/controller/MatchingController.java
index e41ead4..fed9d50 100644
--- a/backend/src/main/java/tech/smdey/toms/controller/MatchingController.java
+++ b/backend/src/main/java/tech/smdey/toms/controller/MatchingController.java
@@ -9,7 +9,10 @@ import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
 import tech.smdey.toms.service.MatchingEngineService;
+import tech.smdey.toms.util.JwtTokenUtil;
+
 import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestHeader;
 
 
 @RestController
@@ -20,15 +23,20 @@ public class MatchingController {
     @Autowired
     private MatchingEngineService matchingEngineService;
 
-    @PostMapping("/{symbol}")
-    public ResponseEntity<String> matchOrders(@PathVariable String symbol) {
-        matchingEngineService.matchOrders(symbol);
-        return ResponseEntity.ok("Matching process completed for symbol: " + symbol);
+    @Autowired
+    private JwtTokenUtil jwtUtil;
+
+    @PostMapping
+    public ResponseEntity<String> matchOrders(@RequestHeader("Authorization") String token) {
+        String tenantId = jwtUtil.extractTenantId(token);
+        matchingEngineService.matchOrders(tenantId);
+        return ResponseEntity.ok("Matching process completed for tenantId: " + tenantId);
     }
 
     @PostMapping("/triggerstop/{symbol}")
-    public ResponseEntity<String> triggerStop(@RequestBody double marketPrice, @PathVariable String symbol) {
-        matchingEngineService.triggerStopOrders(symbol, marketPrice);
+    public ResponseEntity<String> triggerStop(@RequestHeader("Authorization") String token, @RequestBody double marketPrice, @PathVariable String symbol) {
+        String tenantId = jwtUtil.extractTenantId(token);
+        matchingEngineService.triggerStopOrders(symbol, marketPrice, tenantId);
         return ResponseEntity.ok("Stop orders triggered for symbol: " + symbol);
     }
     
diff --git a/backend/src/main/java/tech/smdey/toms/controller/TradeController.java b/backend/src/main/java/tech/smdey/toms/controller/TradeController.java
index 5afc776..6d58266 100644
--- a/backend/src/main/java/tech/smdey/toms/controller/TradeController.java
+++ b/backend/src/main/java/tech/smdey/toms/controller/TradeController.java
@@ -3,14 +3,17 @@ package tech.smdey.toms.controller;
 import java.util.List;
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.ResponseEntity;
 import org.springframework.security.access.prepost.PreAuthorize;
 import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
 import tech.smdey.toms.entity.Trade;
 import tech.smdey.toms.repository.TradeRepository;
+import tech.smdey.toms.util.JwtTokenUtil;
 
 @RestController
 @RequestMapping("/api/v1/trades")
@@ -19,9 +22,19 @@ public class TradeController {
     @Autowired
     private TradeRepository tradeRepository;
 
+    @Autowired
+    private JwtTokenUtil jwtUtil;
+
     @PreAuthorize("hasRole('ADMIN')")
     @GetMapping("/recent")
     public List<Trade> getRecentTrades() {
         return tradeRepository.findTop10ByOrderByTradeTimestampDesc();
     }
+
+    @GetMapping
+    public ResponseEntity<List<Trade>> getTrades(@RequestHeader("Authorization") String token) {
+        String tenantId = jwtUtil.extractTenantId(token); 
+        List<Trade> trades = (tenantId != null) ? tradeRepository.findByTenantId(tenantId) : tradeRepository.findAll();
+        return ResponseEntity.ok(trades);
+    }
 }
diff --git a/backend/src/main/java/tech/smdey/toms/repository/OrderRepository.java b/backend/src/main/java/tech/smdey/toms/repository/OrderRepository.java
index 0fd23e0..124606a 100644
--- a/backend/src/main/java/tech/smdey/toms/repository/OrderRepository.java
+++ b/backend/src/main/java/tech/smdey/toms/repository/OrderRepository.java
@@ -15,11 +15,11 @@ import tech.smdey.toms.entity.TradeOrder;
 public interface OrderRepository extends JpaRepository<TradeOrder, Long> {
     Page<TradeOrder> findByStatus(OrderStatus status, Pageable pageable);
 
-    @Query("SELECT o FROM TradeOrder o WHERE o.symbol = :symbol AND o.orderAction = 'BUY' AND o.status = 'PENDING'")
-    List<TradeOrder> findUnmatchedBuyOrders(@Param("symbol") String symbol, Pageable pageable);
+    @Query("SELECT o FROM TradeOrder o WHERE o.symbol = :symbol AND o.tenantId = :tenantId AND o.status = 'PENDING' AND o.orderAction = 'BUY' ORDER BY o.price DESC, o.timestamp ASC")
+    List<TradeOrder> findUnmatchedBuyOrders(@Param("symbol") String symbol, @Param("tenantId") String tenantId, Pageable pageable);
 
-    @Query("SELECT o FROM TradeOrder o WHERE o.symbol = :symbol AND o.orderAction = 'SELL' AND o.status = 'PENDING'")
-    List<TradeOrder> findUnmatchedSellOrders(@Param("symbol") String symbol, Pageable pageable);
+    @Query("SELECT o FROM TradeOrder o WHERE o.symbol = :symbol AND o.tenantId = :tenantId AND o.status = 'PENDING' AND o.orderAction = 'SELL' ORDER BY o.price ASC, o.timestamp ASC")
+    List<TradeOrder> findUnmatchedSellOrders(@Param("symbol") String symbol, @Param("tenantId") String tenantId, Pageable pageable);
 
     @Query("SELECT o FROM TradeOrder o WHERE o.symbol = :symbol AND o.orderMethod = 'STOP'")
     List<TradeOrder> findStopOrders(@Param("symbol") String symbol);
diff --git a/backend/src/main/java/tech/smdey/toms/service/KafkaConsumerService.java b/backend/src/main/java/tech/smdey/toms/service/KafkaConsumerService.java
index 1b497e7..3b9a472 100644
--- a/backend/src/main/java/tech/smdey/toms/service/KafkaConsumerService.java
+++ b/backend/src/main/java/tech/smdey/toms/service/KafkaConsumerService.java
@@ -1,25 +1,59 @@
 package tech.smdey.toms.service;
 
-import org.springframework.beans.factory.annotation.Autowired;
+import org.apache.kafka.clients.consumer.ConsumerRecord;
 import org.springframework.kafka.annotation.KafkaListener;
 import org.springframework.messaging.simp.SimpMessagingTemplate;
 import org.springframework.stereotype.Service;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import tech.smdey.toms.entity.Trade;
+import tech.smdey.toms.entity.TradeOrder;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
 
 @Service
 public class KafkaConsumerService {
 
+    private final ObjectMapper objectMapper;
+    private final SimpMessagingTemplate messagingTemplate;
+
     @Autowired
-    private SimpMessagingTemplate messagingTemplate;
+    public KafkaConsumerService(SimpMessagingTemplate messagingTemplate) {
+        this.objectMapper = new ObjectMapper();
+        this.objectMapper.registerModule(new JavaTimeModule());
+        this.messagingTemplate = messagingTemplate;
+    }
 
     @KafkaListener(topics = "trades", groupId = "toms-group")
-    public void consumeTradeMessage(String message) {
-        System.out.println("Received Trade Message: " + message);
-        messagingTemplate.convertAndSend("/topic/trades", message);
+    public void consumeTrade(ConsumerRecord<String, String> record) {
+        String tenantId = extractTenantId(record);
+        System.out.println("Received trade for tenant: " + tenantId);
+
+        Trade trade = convertFromJson(record.value(), Trade.class);
+        messagingTemplate.convertAndSend("/topic/trades/" + tenantId, trade);
     }
 
     @KafkaListener(topics = "orders", groupId = "toms-group")
-    public void consumeOrderMessage(String message) {
-        System.out.println("Received Order Message: " + message);
-        messagingTemplate.convertAndSend("/topic/orders", message);
+    public void consumeOrder(ConsumerRecord<String, String> record) {
+        String tenantId = extractTenantId(record);
+        System.out.println("Received order for tenant: " + tenantId);
+
+        TradeOrder order = convertFromJson(record.value(), TradeOrder.class);
+        messagingTemplate.convertAndSend("/topic/orders/" + tenantId, order);
+    }
+
+    private <T> T convertFromJson(String json, Class<T> clazz) {
+        try {
+            return objectMapper.readValue(json, clazz);
+        } catch (Exception e) {
+            throw new RuntimeException("Error parsing JSON", e);
+        }
+    }
+
+    private String extractTenantId(ConsumerRecord<String, String> record) {
+        if (record.headers().lastHeader("tenantId") != null) {
+            return new String(record.headers().lastHeader("tenantId").value());
+        }
+        return "default"; // Fallback tenant ID
     }
 }
diff --git a/backend/src/main/java/tech/smdey/toms/service/KafkaProducerService.java b/backend/src/main/java/tech/smdey/toms/service/KafkaProducerService.java
index 9fe6e3a..8083d1b 100644
--- a/backend/src/main/java/tech/smdey/toms/service/KafkaProducerService.java
+++ b/backend/src/main/java/tech/smdey/toms/service/KafkaProducerService.java
@@ -2,6 +2,8 @@ package tech.smdey.toms.service;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.kafka.core.KafkaTemplate;
+import org.springframework.kafka.support.KafkaHeaders;
+import org.springframework.messaging.support.MessageBuilder;
 import org.springframework.stereotype.Service;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -21,13 +23,27 @@ public class KafkaProducerService {
     private static final String ORDERS_TOPIC = "orders";
 
     public void sendTradeMessage(Trade trade) {
+        String tenantId = trade.getTenantId();
         String message = convertToJson(trade);
-        kafkaTemplate.send(TRADES_TOPIC, message);
+        kafkaTemplate.send(
+            MessageBuilder
+                .withPayload(message)
+                .setHeader(KafkaHeaders.TOPIC, TRADES_TOPIC)
+                .setHeader("tenantId", tenantId) // Add tenantId as header
+                .build()
+            );
     }
 
     public void sendOrderMessage(TradeOrder order) {
+        String tenantId = order.getTenantId();
         String message = convertToJson(order);
-        kafkaTemplate.send(ORDERS_TOPIC, message);
+        kafkaTemplate.send(
+                MessageBuilder
+                    .withPayload(message)
+                    .setHeader(KafkaHeaders.TOPIC, ORDERS_TOPIC)
+                    .setHeader("tenantId", tenantId) // Add tenantId as header
+                    .build()
+                );
     }
 
     private String convertToJson(Object object) {
diff --git a/backend/src/main/java/tech/smdey/toms/service/MatchingEngineService.java b/backend/src/main/java/tech/smdey/toms/service/MatchingEngineService.java
index 37f3438..bb8e301 100644
--- a/backend/src/main/java/tech/smdey/toms/service/MatchingEngineService.java
+++ b/backend/src/main/java/tech/smdey/toms/service/MatchingEngineService.java
@@ -30,23 +30,23 @@ public class MatchingEngineService {
     @Autowired
     private KafkaProducerService kafkaProducerService;
 
-    public void matchOrders() {
+    public void matchOrders(String tenantId) {
         List<String> symbols = new ArrayList<String>();
         symbols.add("AAPL");
         symbols.add("GOOGL");
         symbols.add("MSFT");
 
         for (String symbol : symbols) {
-            matchOrdersForSymbol(symbol);
+            matchOrdersForSymbol(symbol, tenantId);
         }
 
     }
 
     // Match orders for a specific symbol
-    public void matchOrdersForSymbol(String symbol) {
+    public void matchOrdersForSymbol(String symbol, String tenantId) {
         Pageable topOrders = PageRequest.of(0, 100);
-        List<TradeOrder> buyOrders = orderRepository.findUnmatchedBuyOrders(symbol, topOrders);
-        List<TradeOrder> sellOrders = orderRepository.findUnmatchedSellOrders(symbol, topOrders);
+        List<TradeOrder> buyOrders = orderRepository.findUnmatchedBuyOrders(symbol, tenantId, topOrders);
+        List<TradeOrder> sellOrders = orderRepository.findUnmatchedSellOrders(symbol, tenantId, topOrders);
 
         // Sort orders
         buyOrders.sort(Comparator.comparing(TradeOrder::getPrice).reversed()
@@ -153,7 +153,7 @@ public class MatchingEngineService {
     }
 
     // Trigger stop orders based on market price
-    public void triggerStopOrders(String symbol, double marketPrice) {
+    public void triggerStopOrders(String symbol, double marketPrice, String tenantId) {
         List<TradeOrder> stopOrders = orderRepository.findStopOrders(symbol);
         for (TradeOrder stopOrder : stopOrders) {
             boolean shouldTrigger = (stopOrder.getOrderAction() == OrderAction.BUY && marketPrice >= stopOrder.getStopPrice()) ||
@@ -162,7 +162,7 @@ public class MatchingEngineService {
             if (shouldTrigger) {
                 stopOrder.setOrderMethod(OrderMethod.MARKET);
                 orderRepository.save(stopOrder);
-                matchOrdersForSymbol(stopOrder.getSymbol()); // Reprocess the market orders
+                matchOrdersForSymbol(stopOrder.getSymbol(), tenantId); // Reprocess the market orders
             }
         }
     }
